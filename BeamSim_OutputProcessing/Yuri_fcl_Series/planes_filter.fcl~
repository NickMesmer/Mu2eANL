// Andrei Gaponenko, 2015
// Run this script over stage 1 dsregion output
// For example you can use the sample as an input: sim.mu2e.cd3-beam-g4s1cat-dsregion.051017.art 

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "Mu2eG4/fcl/prolog.fcl"

# Give this job a name.
process_name :  beamg4s2planes

source : {
   module_type : RootInput
}

services : {

   message               : @local::default_message
   TFileService          : { fileName : "nts.owner.beam-g4s2-planes.version.sequencer.root" }
   RandomNumberGenerator : { }

   GeometryService        : { inputFile      : "Mu2eG4/geom/geom_common_crv_v07.txt" }
   ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
   GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
   G4Helper               : { }
   SeedService            : @local::automaticSeeds
}

physics : {
   analyzers: {
      genCountLogger: {
         module_type: GenEventCountReader
      }
    HitDumper: {
        module_type: StepPointMC1stHitDumper
        hitsInputTag: "g4run:Planes"
        TimeOffsets :  {  }
    }
   }

   producers: {
      g4run : {
         module_type: Mu2eG4
         physics: @local::mu2eg4DefaultPhysics
         ResourceLimits: @local::mu2eg4DefaultResourceLimits
	 TrajectoryControl: @local::mu2eg4NoTrajectories
         debug:  @local::mu2eg4DefaultDebug
         visualization: @local::mu2eg4NoVisualization

	 MultiStageParameters : {
            simParticleNumberOffset: 100000 // safe b/c of g4.particlesSizeLimit in stage1
            genInputHits: [ "dsRegionFilter:dsregion" ]
            inputSimParticles: "dsRegionFilter"
	    inputMCTrajectories: ""
            inputPhysVolumeMultiInfo: "compressPVdsRegion"
	 }

         SDConfig : {
            enableSD: [ tracker, calorimeter, calorimeterRO, CRV, virtualdetector, stoppingtarget, protonabsorber ]  // activate just the explicitly listed SDs
            preSimulatedHits: []
	    TimeVD: { times: [] }
         }	 

         Mu2eG4StackingOnlyCut: {
	    // do not stack neutrinos and soft gammas. no point to re-check this in stepping.
	    type: pdgId pars: [ 12, -12, 14, -14, 16, -16]
	 }

         Mu2eG4SteppingOnlyCut: {}

         Mu2eG4CommonCut: {
	    type: union
   	    pars:
   	    [
	    {type: intersection pars: [ { type: kineticEnergy cut: 80 }, 
	    	   		        { type: pdgId pars: [ 22, 11, -11 ]} ]},
	    {type: intersection pars: [ { type: kineticEnergy cut: 1000},
	    	   		      	{ type: pdgId pars: [2112, 2212 ]} ]}
   	    ] 
	    write: Planes
         }
      }

      compressPVplanes : {
         module_type    : CompressPhysicalVolumes
         volumesInput   : "g4run"
         hitInputs      : []
         particleInputs : [ "planesFilter" ]
      }

      compressPVFull : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "g4run" ]
      }
   }

   filters: {
      planesFilter: {
         module_type: FilterG4Out
	 noInstanceName : true
         mainHitInputs : [ "g4run:Planes" ]
         extraHitInputs : [ ]
         numSimParticleCollections : 1
         vetoDaughters: []
      }

      g4status: {
         module_type: FilterStatusG4
         input: "g4run"
	 maxAcceptedStatus: 1  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
      }

      g4consistent: {
         module_type: FilterStatusG4
         input: "g4run"
	 maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
      }
   }

   trigplanes : [g4run, g4consistent, planesFilter, compressPVplanes]
   g4StatusFilter : [g4run, "!g4status", compressPVFull ]
   trigger_paths  : [trigplanes, g4StatusFilter]

   outputs: [truncatedEvtsOutput, planesout]
   an: [ genCountLogger, HitDumper ]
   end_paths: [outputs, an]
}

outputs: {

   planesout : {
      module_type : RootOutput
      SelectEvents: ["trigplanes"]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_planesFilter_*_beamg4s2planes",
         "keep *_compressPVplanes_*_beamg4s2planes"
      ]
      fileName    : "sim.owner.beam-g4s2-planes.version.sequencer.art"
   }

  truncatedEvtsOutput : {
      module_type : RootOutput
      SelectEvents: ["g4StatusFilter"]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_g4run_*_*",
         "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_g4run_*_*",
         "keep *_compressPVFull_*_*"
      ]
      fileName    : "sim.owner.beam-g4s2-planes-truncated.version.sequencer.art"
   }

}

//physics.producers.g4run.physics.minRangeCut : 1. // mm

// Limit the amount of "Begin processing the ... record" messages
services.message.destinations.log.categories.ArtReport.reportEvery : 1
services.message.destinations.log.categories.ArtReport.limit : 1
services.message.destinations.log.categories.ArtReport.timespan : 300

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20

//Add Mu2e geometry service identifier				      
services.GeometryService.simulatedDetector.tool_type : "Mu2e"
